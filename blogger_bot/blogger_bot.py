import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties

# üîë –í—Å—Ç–∞–≤—å API-—Ç–æ–∫–µ–Ω
API_TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù_–ë–û–¢–ê"

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# üìå –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect("blogger.db") as db:
        await db.execute(
            """CREATE TABLE IF NOT EXISTS subscribers (
                user_id INTEGER PRIMARY KEY
            )"""
        )
        await db.execute(
            """CREATE TABLE IF NOT EXISTS keywords (
                keyword TEXT PRIMARY KEY,
                response TEXT
            )"""
        )
        await db.commit()

# üèÅ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É (–µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç)
    async with aiosqlite.connect("blogger.db") as db:
        await db.execute("INSERT OR IGNORE INTO subscribers (user_id) VALUES (?)", (user_id,))
        await db.commit()

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üíå –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="subscribe")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unsubscribe")]
        ]
    )

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –±–ª–æ–≥–µ—Ä–∞. üì¢\n\n"
                         "üìå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!\n"
                         "üí° –ù–∞–ø–∏—à–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∏ —è –ø–æ–¥—Å–∫–∞–∂—É —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.", reply_markup=keyboard)

# ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞
@dp.callback_query(lambda c: c.data == "subscribe")
async def subscribe(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    async with aiosqlite.connect("blogger.db") as db:
        await db.execute("INSERT OR IGNORE INTO subscribers (user_id) VALUES (?)", (user_id,))
        await db.commit()

    await callback_query.message.answer("‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!")
    await callback_query.answer()

# ‚ùå –û—Ç–ø–∏—Å–∫–∞
@dp.callback_query(lambda c: c.data == "unsubscribe")
async def unsubscribe(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    async with aiosqlite.connect("blogger.db") as db:
        await db.execute("DELETE FROM subscribers WHERE user_id = ?", (user_id,))
        await db.commit()

    await callback_query.message.answer("‚ùå –¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
    await callback_query.answer()

# üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message(Command("broadcast"))
async def broadcast(message: Message):
    if message.chat.type != "private":
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if message.from_user.id not in [123456789, 987654321]:  # –£–∫–∞–∂–∏ —Å–≤–æ–π Telegram ID
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")
        return

    try:
        text = message.text.split(" ", 1)[1]  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        async with aiosqlite.connect("blogger.db") as db:
            cursor = await db.execute("SELECT user_id FROM subscribers")
            subscribers = await cursor.fetchall()

        count = 0
        for user in subscribers:
            try:
                await bot.send_message(user[0], f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n\n{text}")
                count += 1
            except:
                pass

        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º!")
    except IndexError:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>")

# üìå –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
@dp.message()
async def auto_reply(message: Message):
    user_text = message.text.lower()
    
    async with aiosqlite.connect("blogger.db") as db:
        cursor = await db.execute("SELECT response FROM keywords WHERE keyword = ?", (user_text,))
        response = await cursor.fetchone()

    if response:
        await message.answer(response[0])

# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
@dp.message(Command("add_reply"))
async def add_reply(message: Message):
    if message.chat.type != "private":
        return

    if message.from_user.id not in [123456789, 987654321]:  # –£–∫–∞–∂–∏ —Å–≤–æ–π Telegram ID
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤.")
        return

    try:
        _, keyword, response = message.text.split(";", 2)
        keyword = keyword.strip().lower()
        response = response.strip()

        async with aiosqlite.connect("blogger.db") as db:
            await db.execute("INSERT OR REPLACE INTO keywords (keyword, response) VALUES (?, ?)", (keyword, response))
            await db.commit()

        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç:\n\nüîë {keyword}\nüí° {response}")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_reply <–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ>; <–æ—Ç–≤–µ—Ç>")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
