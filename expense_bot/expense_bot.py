import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# üîë –í—Å—Ç–∞–≤—å —Å–≤–æ–π API-—Ç–æ–∫–µ–Ω
API_TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù_–ë–û–¢–ê"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# üìå –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect("expenses.db") as db:
        await db.execute(
            """CREATE TABLE IF NOT EXISTS expenses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                amount REAL,
                category TEXT
            )"""
        )
        await db.execute(
            """CREATE TABLE IF NOT EXISTS settings (
                user_id INTEGER PRIMARY KEY,
                currency TEXT DEFAULT "‚ÇΩ"
            )"""
        )
        await db.commit()

# üîò –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"), KeyboardButton(text="üìä –ë–∞–ª–∞–Ω—Å")],
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True
    )
    return keyboard

# üéõ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
def settings_menu():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –í–∞–ª—é—Ç–∞", callback_data="change_currency")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
    )
    return keyboard

# üèÅ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ üí∞", reply_markup=main_menu())

# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def add_expense_prompt(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üçî –ï–¥–∞", callback_data="add_expense_–µ–¥–∞"),
             InlineKeyboardButton(text="üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data="add_expense_—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")],
            [InlineKeyboardButton(text="üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data="add_expense_—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è")],
            [InlineKeyboardButton(text="üõç –ü–æ–∫—É–ø–∫–∏", callback_data="add_expense_–ø–æ–∫—É–ø–∫–∏")]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(lambda c: c.data.startswith("add_expense_"))
async def process_add_expense(callback_query: types.CallbackQuery):
    category = callback_query.data.split("_")[2]
    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –Ω–∞ {category} (–Ω–∞–ø—Ä–∏–º–µ—Ä: `500`)", parse_mode="Markdown")

    @dp.message()
    async def add_expense_amount(message: Message):
        try:
            amount = float(message.text)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–∞–ª—é—Ç—É
            async with aiosqlite.connect("expenses.db") as db:
                cursor = await db.execute("SELECT currency FROM settings WHERE user_id = ?", (message.from_user.id,))
                currency = await cursor.fetchone()
                currency = currency[0] if currency else "‚ÇΩ"

                await db.execute("INSERT INTO expenses (user_id, amount, category) VALUES (?, ?, ?)", 
                                 (message.from_user.id, amount, category))
                await db.commit()

            await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount}{currency} –Ω–∞ {category}")
        except ValueError:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")

# üìä –ë–∞–ª–∞–Ω—Å
@dp.message(lambda message: message.text == "üìä –ë–∞–ª–∞–Ω—Å")
async def balance(message: Message):
    async with aiosqlite.connect("expenses.db") as db:
        cursor = await db.execute("SELECT SUM(amount) FROM expenses WHERE user_id = ?", (message.from_user.id,))
        total = await cursor.fetchone()

        cursor = await db.execute("SELECT currency FROM settings WHERE user_id = ?", (message.from_user.id,))
        currency = await cursor.fetchone()
        currency = currency[0] if currency else "‚ÇΩ"

    balance = total[0] if total[0] else 0
    await message.answer(f"üí∞ –¢–≤–æ–π –æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {balance}{currency}")

# üìú –ò—Å—Ç–æ—Ä–∏—è
@dp.message(lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def history(message: Message):
    async with aiosqlite.connect("expenses.db") as db:
        cursor = await db.execute("SELECT amount, category FROM expenses WHERE user_id = ? ORDER BY id DESC LIMIT 5", 
                                  (message.from_user.id,))
        expenses = await cursor.fetchall()

        cursor = await db.execute("SELECT currency FROM settings WHERE user_id = ?", (message.from_user.id,))
        currency = await cursor.fetchone()
        currency = currency[0] if currency else "‚ÇΩ"

    if not expenses:
        await message.answer("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞!")
        return
    
    history_text = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–∞—Å—Ö–æ–¥–æ–≤:\n"
    for amount, category in expenses:
        history_text += f"üí∏ {amount}{currency} ‚Äî {category}\n"
    
    await message.answer(history_text)

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
@dp.message(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(message: Message):
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=settings_menu())

# üí∞ –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
@dp.callback_query(lambda c: c.data == "change_currency")
async def change_currency(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üá∑üá∫ –†—É–±–ª–∏ (‚ÇΩ)", callback_data="currency_‚ÇΩ"),
             InlineKeyboardButton(text="üá∫üá∏ –î–æ–ª–ª–∞—Ä—ã ($)", callback_data="currency_$")],
            [InlineKeyboardButton(text="üá™üá∫ –ï–≤—Ä–æ (‚Ç¨)", callback_data="currency_‚Ç¨")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")]
        ]
    )
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É:", reply_markup=keyboard)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
@dp.callback_query(lambda c: c.data.startswith("currency_"))
async def update_currency(callback_query: types.CallbackQuery):
    currency = callback_query.data.split("_")[1]
    
    async with aiosqlite.connect("expenses.db") as db:
        await db.execute("INSERT OR REPLACE INTO settings (user_id, currency) VALUES (?, ?)", 
                         (callback_query.from_user.id, currency))
        await db.commit()

    await callback_query.message.edit_text(f"‚úÖ –í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {currency}")

# üîô –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–∞–¥
@dp.callback_query(lambda c: c.data.startswith("back_to_"))
async def go_back(callback_query: types.CallbackQuery):
    if callback_query.data == "back_to_main":
        await callback_query.message.edit_text("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
    elif callback_query.data == "back_to_settings":
        await callback_query.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=settings_menu())

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
