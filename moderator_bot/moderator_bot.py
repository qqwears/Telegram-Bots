import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ChatPermissions
from aiogram.utils.markdown import hbold
from aiogram.client.default import DefaultBotProperties

# üîë –í—Å—Ç–∞–≤—å API-—Ç–æ–∫–µ–Ω
API_TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù_–ë–û–¢–ê"

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# üìå –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤
async def init_db():
    async with aiosqlite.connect("moderator.db") as db:
        await db.execute(
            """CREATE TABLE IF NOT EXISTS faq (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                question TEXT,
                answer TEXT
            )"""
        )
        await db.execute(
            """CREATE TABLE IF NOT EXISTS warnings (
                user_id INTEGER PRIMARY KEY,
                count INTEGER DEFAULT 0
            )"""
        )
        await db.commit()

# ‚ö†Ô∏è –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ (–º–∞—Ç, —Å–ø–∞–º –∏ —Ç. –¥.)
BAD_WORDS = ["–ª–æ—Ö", "—Å—É–∫–∞", "–ø–∏–¥–æ—Ä", "–∫–∞–∑–∏–Ω–æ", "http", "https"]

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start (—Ç–æ–ª—å–∫–æ –≤ –õ–°)
@dp.message(Command("start"))
async def start(message: Message):
    if message.chat.type == "private":
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã. –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç –∏ –¥–∞–π –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# üìå –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã
@dp.message(Command("faq"))
async def faq_list(message: Message):
    async with aiosqlite.connect("moderator.db") as db:
        cursor = await db.execute("SELECT question FROM faq")
        questions = await cursor.fetchall()

    if not questions:
        await message.answer("‚ùå –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    text = "üìå <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
    for q in questions:
        text += f"üîπ {q[0]}\n"
    text += "\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç, –Ω–∞–ø–∏—à–∏: /answer <–≤–æ–ø—Ä–æ—Å>"

    await message.answer(text)

@dp.message(Command("answer"))
async def answer(message: Message):
    try:
        question = message.text.split(" ", 1)[1].strip().lower()
        async with aiosqlite.connect("moderator.db") as db:
            cursor = await db.execute("SELECT answer FROM faq WHERE question = ?", (question,))
            result = await cursor.fetchone()

        if result:
            await message.answer(f"‚ùì <b>{question.capitalize()}</b>\n\nüí° {result[0]}")
        else:
            await message.answer("‚ùå –û—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except IndexError:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /answer <–≤–æ–ø—Ä–æ—Å>")

# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ FAQ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message(Command("add_faq"))
async def add_faq(message: Message):
    if message.chat.type == "private":
        await message.answer("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    user = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if not user.is_chat_admin():
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å FAQ.")
        return

    try:
        _, question, answer = message.text.split(";", 2)
        question = question.strip().lower()
        answer = answer.strip()

        async with aiosqlite.connect("moderator.db") as db:
            await db.execute("INSERT INTO faq (question, answer) VALUES (?, ?)", (question, answer))
            await db.commit()

        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π FAQ:\n\n‚ùì {hbold(question)}\nüí° {answer}")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_faq <–≤–æ–ø—Ä–æ—Å>; <–æ—Ç–≤–µ—Ç>")

# ‚ùå –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Ç–∞ –∏ —Å–ø–∞–º–∞
@dp.message()
async def filter_bad_words(message: Message):
    if message.chat.type == "private":
        return  # –ù–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –õ–°

    if any(bad_word in message.text.lower() for bad_word in BAD_WORDS):
        await message.delete()
        async with aiosqlite.connect("moderator.db") as db:
            cursor = await db.execute("SELECT count FROM warnings WHERE user_id = ?", (message.from_user.id,))
            result = await cursor.fetchone()

            warnings = result[0] + 1 if result else 1
            await db.execute("INSERT OR REPLACE INTO warnings (user_id, count) VALUES (?, ?)", 
                             (message.from_user.id, warnings))
            await db.commit()

        if warnings >= 3:
            await bot.restrict_chat_member(
                chat_id=message.chat.id,
                user_id=message.from_user.id,
                permissions=ChatPermissions(can_send_messages=False)
            )
            await message.answer(f"üö´ {message.from_user.full_name} –ø–æ–ª—É—á–∏–ª –º—É—Ç –∑–∞ —Å–ø–∞–º/–º–∞—Ç (3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è).")
        else:
            await message.answer(f"‚ö†Ô∏è {message.from_user.full_name}, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞! (–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warnings}/3)")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
