import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties

# üîë –í—Å—Ç–∞–≤—å API-—Ç–æ–∫–µ–Ω
API_TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù_–ë–û–¢–ê"

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# üìå –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect("hr_bot.db") as db:
        await db.execute(
            """CREATE TABLE IF NOT EXISTS candidates (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER UNIQUE,
                name TEXT,
                experience TEXT,
                skills TEXT,
                stage TEXT
            )"""
        )
        await db.commit()

# üèÅ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ù–∞—á–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", callback_data="start_interview")]
        ]
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ä–µ–∫—Ä—É—Ç–µ—Ä ü§ñ\n\n"
                         "–Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–º —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ HR-–º–µ–Ω–µ–¥–∂–µ—Ä—É.", 
                         reply_markup=keyboard)

# üìù –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
@dp.callback_query(lambda c: c.data == "start_interview")
async def start_interview(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    async with aiosqlite.connect("hr_bot.db") as db:
        await db.execute("INSERT OR REPLACE INTO candidates (user_id, stage) VALUES (?, ?)", 
                         (user_id, "name"))
        await db.commit()

    await callback_query.message.answer("üìù –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await callback_query.answer()

# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
@dp.message()
async def process_answers(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("hr_bot.db") as db:
        cursor = await db.execute("SELECT stage FROM candidates WHERE user_id = ?", (user_id,))
        result = await cursor.fetchone()

    if not result:
        await message.answer("‚ùå –¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ. –ù–∞–∂–º–∏ /start –∏ –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.")
        return

    stage = result[0]

    async with aiosqlite.connect("hr_bot.db") as db:
        if stage == "name":
            await db.execute("UPDATE candidates SET name = ?, stage = 'experience' WHERE user_id = ?", 
                             (message.text, user_id))
            await db.commit()
            await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {message.text}! üìå\n–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ—ë–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã.")

        elif stage == "experience":
            await db.execute("UPDATE candidates SET experience = ?, stage = 'skills' WHERE user_id = ?", 
                             (message.text, user_id))
            await db.commit()
            await message.answer("–°–ø–∞—Å–∏–±–æ! üî• –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—á–∏—Å–ª–∏ —Å–≤–æ–∏ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (Python, SQL, Figma –∏ —Ç. –¥.).")

        elif stage == "skills":
            await db.execute("UPDATE candidates SET skills = ?, stage = NULL WHERE user_id = ?", 
                             (message.text, user_id))
            await db.commit()

            await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –∏ –ø–µ—Ä–µ–¥–∞–Ω—ã HR-–º–µ–Ω–µ–¥–∂–µ—Ä—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. üì©")

# üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è HR)
@dp.message(Command("candidates"))
async def show_candidates(message: Message):
    if message.from_user.id not in [123456789, 987654321]:  # –£–∫–∞–∂–∏ ID HR-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
        return

    async with aiosqlite.connect("hr_bot.db") as db:
        cursor = await db.execute("SELECT name, experience, skills FROM candidates")
        candidates = await cursor.fetchall()

    if not candidates:
        await message.answer("üì≠ –ë–∞–∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø—É—Å—Ç–∞.")
        return
    
    text = "üìú <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:</b>\n\n"
    for name, experience, skills in candidates:
        text += f"üë§ {name}\nüìå –û–ø—ã—Ç: {experience}\nüí° –ù–∞–≤—ã–∫–∏: {skills}\n\n"

    await message.answer(text)

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
