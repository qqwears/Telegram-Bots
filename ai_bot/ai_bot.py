import asyncio
import aiosqlite
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties

# üîë –í—Å—Ç–∞–≤—å API-—Ç–æ–∫–µ–Ω—ã
API_TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù_–ë–û–¢–ê"
OPENAI_API_KEY = "–¢–í–û–ô_OPENAI_API_–ö–õ–Æ–ß"

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI
openai.api_key = OPENAI_API_KEY
MAX_FREE_MESSAGES = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# üìå –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect("ai_bot.db") as db:
        await db.execute(
            """CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                free_messages INTEGER DEFAULT 0
            )"""
        )
        await db.commit()

# üèÅ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø AI-–±–æ—Ç ü§ñ\n\n"
                         "–ó–∞–¥–∞–≤–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å. –£ —Ç–µ–±—è –µ—Å—Ç—å 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
                         "üîπ –ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç ‚Äì –Ω–∞–ø–∏—à–∏ /reset")

# üî• AI-–û—Ç–≤–µ—Ç—ã
@dp.message()
async def chatgpt_reply(message: Message):
    user_id = message.from_user.id

    async with aiosqlite.connect("ai_bot.db") as db:
        cursor = await db.execute("SELECT free_messages FROM users WHERE user_id = ?", (user_id,))
        result = await cursor.fetchone()

        free_messages = result[0] if result else 0

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if free_messages >= MAX_FREE_MESSAGES:
            await message.answer("‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –ù–∞–ø–∏—à–∏ /reset, —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await db.execute("INSERT OR REPLACE INTO users (user_id, free_messages) VALUES (?, ?)", 
                         (user_id, free_messages + 1))
        await db.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": message.text}]
        )
        answer = response["choices"][0]["message"]["content"]
    except Exception as e:
        answer = "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    await message.answer(answer)

# üîÑ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(Command("reset"))
async def reset_messages(message: Message):
    user_id = message.from_user.id

    async with aiosqlite.connect("ai_bot.db") as db:
        await db.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
        await db.commit()

    await message.answer("‚úÖ –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω! –¢—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
